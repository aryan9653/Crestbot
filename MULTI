// app/layout.tsx
import type { Metadata } from "next"
import { Inter, JetBrains_Mono, Sora } from 'next/font/google'
import "./globals.css"
import "./typography.css"
import { ThemeProvider } from "@/components/theme-provider"
import { NavHeader } from "@/components/nav-header"

export const metadata: Metadata = {
  title: "Crest Trade Bot",
  description: "Multi-asset trading dashboard for Crypto and Indian Markets",
  generator: "v0.dev",
}

const inter = Inter({ subsets: ["latin"], variable: "--font-sans" })
const mono = JetBrains_Mono({ subsets: ["latin"], variable: "--font-mono" })
const sora = Sora({ subsets: ["latin"], variable: "--font-display" })

export default function RootLayout({ children }: Readonly<{ children: React.ReactNode }>) {
  return (
    <html lang="en" className={`${inter.variable} ${mono.variable} ${sora.variable}`}>
      <body className="font-sans antialiased">
        <ThemeProvider attribute="class" defaultTheme="light" enableSystem disableTransitionOnChange>
          <div className="min-h-screen flex flex-col bg-white">
            <NavHeader />
            <main className="flex-1">{children}</main>
          </div>
        </ThemeProvider>
      </body>
    </html>
  )
}

// components/nav-header.tsx
"use client"

import Link from "next/link"
import Image from "next/image"
import { usePathname } from "next/navigation"
import { useTheme } from "next-themes"
import { Sun, Moon, ChevronDown } from 'lucide-react'
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

const links = [
  { href: "/", label: "Dashboard" },
  { href: "/orders", label: "Orders" },
  { href: "/bot-settings", label: "Bot Settings" },
  { href: "/logs", label: "Logs" },
  { href: "/backtest", label: "Backtest" },
]

export function NavHeader() {
  const pathname = usePathname()
  const { theme, setTheme } = useTheme()

  return (
    <header className="sticky top-0 z-50 border-b bg-white/70 backdrop-blur supports-[backdrop-filter]:bg-white/60">
      {/* subtle top gradient bar */}
      <div className="h-0.5 w-full bg-gradient-to-r from-emerald-400 via-emerald-300 to-amber-300" aria-hidden />
      <div className="container mx-auto flex h-14 items-center justify-between px-4">
        <div className="flex items-center gap-6">
          <Link href="/" className="flex items-center gap-2">
            <Image
              src="/robot-trader-logo.png"
              alt="Crest Trade Bot"
              width={24}
              height={24}
              className="rounded-sm"
              priority
            />
            <span className="font-semibold tracking-tight">Crest Trade Bot</span>
          </Link>

          <nav className="hidden md:flex items-center gap-1">
            {links.map((l) => {
              const active = pathname === l.href
              return (
                <Link
                  key={l.href}
                  href={l.href}
                  className={cn(
                    "px-3 py-1.5 text-sm rounded-md transition-colors",
                    active
                      ? "bg-emerald-50 text-emerald-900 shadow-xs"
                      : "text-muted-foreground hover:bg-muted"
                  )}
                >
                  {l.label}
                </Link>
              )
            })}
          </nav>
        </div>

        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            className="hidden sm:inline-flex border-emerald-200 text-emerald-800 bg-transparent"
            aria-label="API status OK"
            title="API status"
          >
            API OK
          </Button>

          <Button
            variant="ghost"
            size="icon"
            className="rounded-full"
            onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
            aria-label="Toggle theme"
            title="Toggle theme"
          >
            {theme === "dark" ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
        </Button>

        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="pl-1 pr-2">
              <Avatar className="h-8 w-8">
                <AvatarFallback>CT</AvatarFallback>
              </Avatar>
              <ChevronDown className="ml-1 h-4 w-4 text-muted-foreground" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Account</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={() => alert("Keys (mock)")}>API Keys</DropdownMenuItem>
            <DropdownMenuItem onClick={() => alert("Profile (mock)")}>Profile</DropdownMenuItem>
            <DropdownMenuItem onClick={() => alert("Logout (mock)")}>Logout</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </div>
  </header>
)
}

// app/page.tsx
"use client"

import { useEffect, useState } from "react"
import { AppFooter } from "@/components/app-footer"
import { MarketOverview } from "@/components/market-overview"
import { PositionSummary } from "@/components/position-summary"
import { OrderForm } from "@/components/order-form"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { MarketSwitcher, type IndiaBroker, type MarketKind } from "@/components/market-switcher"

export default function Page() {
  const [connected, setConnected] = useState(true)
  const [marketStatus, setMarketStatus] = useState<"open" | "closed" | "volatile">("open")
  const [serverTime, setServerTime] = useState<string>(new Date().toISOString())

  const [market, setMarket] = useState<MarketKind>("CRYPTO")
  const [broker, setBroker] = useState<IndiaBroker>("Zerodha")

  useEffect(() => {
    const t = setInterval(() => setServerTime(new Date().toISOString()), 1000)
    const m = setInterval(() => {
      const states: ("open" | "closed" | "volatile")[] = ["open", "open", "open", "volatile"]
      setMarketStatus(states[Math.floor(Math.random() * states.length)])
    }, 15000)
    const c = setInterval(() => setConnected((c) => (Math.random() < 0.98 ? true : !c)), 20000)
    return () => {
      clearInterval(t)
      clearInterval(m)
      clearInterval(c)
    }
  }, [])

  return (
    <>
      <div className="flex-1 container mx-auto p-4 md:p-6 space-y-4 md:space-y-6">
        <MarketSwitcher market={market} onMarketChange={setMarket} broker={broker} onBrokerChange={setBroker} />

        <section className="grid grid-cols-1 2xl:grid-cols-3 gap-4 md:gap-6">
          <div className="2xl:col-span-2 space-y-4 md:space-y-6">
            <MarketOverview
              market={market}
              defaultSymbols={
                market === "CRYPTO"
                  ? ["BTCUSDT", "ETHUSDT", "SOLUSDT", "BNBUSDT"]
                  : ["RELIANCE", "TCS", "HDFCBANK", "INFY", "SBIN"]
              }
            />
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6">
              <PositionSummary />
              <Card>
                <CardHeader>
                  <CardTitle>Notes</CardTitle>
                </CardHeader>
                <CardContent className="text-sm text-muted-foreground space-y-2">
                  <p>{"Switch between Crypto and India to see equivalent functionality."}</p>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>{"India mode streams NSE/BSE quotes via /api/india/stream (real if broker envs available, else mocked)."}</li>
                    <li>{"Do not expose broker keys on the client. Keep them as server environment variables."}</li>
                  </ul>
                </CardContent>
              </Card>
            </div>
          </div>

          <div className="2xl:col-span-1 space-y-4 md:space-y-6">
            <OrderForm market={market} broker={broker} />
          </div>
        </section>
      </div>
      <AppFooter connected={connected} marketStatus={marketStatus} serverTime={serverTime} market={market} broker={broker} />
    </>
  )
}

// components/market-switcher.tsx
"use client"

import { motion, AnimatePresence } from "framer-motion"
import { cn } from "@/lib/utils"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Coins, IndianRupee } from 'lucide-react'

export type MarketKind = "CRYPTO" | "INDIA"
export type IndiaBroker = "Zerodha" | "Upstox" | "AngelOne" | "Dhan"

export function MarketSwitcher({
market,
onMarketChange,
broker,
onBrokerChange,
}: {
market: MarketKind
onMarketChange: (m: MarketKind) => void
broker: IndiaBroker
onBrokerChange: (b: IndiaBroker) => void
}) {
return (
  <div className="flex flex-wrap items-center justify-between gap-3">
    <div className="relative inline-grid grid-cols-2 p-1 rounded-xl border bg-gradient-to-br from-white to-muted/60 shadow-sm">
      {(["CRYPTO", "INDIA"] as MarketKind[]).map((m) => {
        const active = market === m
        const Icon = m === "CRYPTO" ? Coins : IndianRupee
        return (
          <motion.button
            key={m}
            onClick={() => onMarketChange(m)}
            type="button"
            aria-pressed={active}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            className={cn(
              "relative z-10 px-4 py-2 text-sm rounded-lg transition-colors flex items-center justify-center gap-2",
              active ? "text-foreground" : "text-muted-foreground"
            )}
          >
            <Icon className={cn("h-4 w-4", active ? "opacity-90" : "opacity-60")} />
            <span className="font-medium">{m === "CRYPTO" ? "Crypto" : "India (NSE/BSE)"}</span>
            {active && (
              <motion.span
                layoutId="pill"
                className={cn(
                  "absolute inset-0 z-[-1] rounded-lg shadow-sm",
                  m === "CRYPTO"
                    ? "bg-emerald-50/90"
                    : "bg-amber-50/90"
                )}
                transition={{ type: "spring", stiffness: 400, damping: 32 }}
              />
            )}
          </motion.button>
        )
      })}
    </div>

    <AnimatePresence initial={false} mode="wait">
      {market === "INDIA" && (
        <motion.div
          key="broker-select"
          initial={{ opacity: 0, x: 8 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -8 }}
          transition={{ duration: 0.2 }}
          className="flex items-center gap-2"
        >
          <span className="text-sm text-muted-foreground">Broker</span>
          <Select value={broker} onValueChange={(v) => onBrokerChange(v as IndiaBroker)}>
            <SelectTrigger className="w-[160px]">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Zerodha">Zerodha</SelectItem>
              <SelectItem value="Upstox">Upstox</SelectItem>
              <SelectItem value="AngelOne">Angel One</SelectItem>
              <SelectItem value="Dhan">Dhan</SelectItem>
            </SelectContent>
          </Select>
        </motion.div>
      )}
    </AnimatePresence>
  </div>
)
}

// components/market-overview.tsx
"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { CandleChart } from "@/components/candle-chart"
import { OrderBook } from "@/components/order-book"
import { TradesFeed } from "@/components/trades-feed"
import { useLivePrice } from "@/hooks/use-live-price"
import { AnimatePresence, motion } from "framer-motion"

const containerVariants = {
hidden: {},
show: {
  transition: {
    staggerChildren: 0.06,
    delayChildren: 0.05,
  },
},
}
const itemVariants = {
hidden: { opacity: 0, y: 8 },
show: { opacity: 1, y: 0, transition: { duration: 0.25 } },
}

export function MarketOverview({ market, defaultSymbols }: { market: "CRYPTO" | "INDIA"; defaultSymbols: string[] }) {
const [pair, setPair] = useState(defaultSymbols[0])

useEffect(() => {
  setPair(defaultSymbols[0])
}, [defaultSymbols])

const livePrice = useLivePrice(market, pair)

return (
  <Card>
    <CardHeader>
      <CardTitle className="flex items-center justify-between">
        <select
          className="select-none outline-none text-lg font-semibold"
          value={pair}
          onChange={(e) => setPair(e.target.value)}
        >
          {defaultSymbols.map((s) => (
            <option key={s} value={s}>
              {s}
            </option>
          ))}
        </select>
        <span className="text-sm font-medium text-muted-foreground">
          {livePrice ? livePrice.toLocaleString() : "Loading..."}
        </span>
      </CardTitle>
    </CardHeader>
    <AnimatePresence mode="wait">
      <motion.div
        key={market + pair}
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -8 }}
        transition={{ duration: 0.2 }}
      >
        <CardContent className="grid grid-cols-1 lg:grid-cols-3 gap-4">
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate="show"
            className="contents"
          >
            <motion.div variants={itemVariants} className="lg:col-span-2 border rounded-lg p-2 bg-white/60">
              <CandleChart symbol={pair} livePrice={livePrice} />
            </motion.div>
            <motion.div variants={itemVariants} className="space-y-4">
              <motion.div variants={itemVariants}>
                <OrderBook symbol={pair} livePrice={livePrice} market={market} />
              </motion.div>
              <motion.div variants={itemVariants}>
                <TradesFeed symbol={pair} livePrice={livePrice} market={market} />
              </motion.div>
            </motion.div>
          </motion.div>
        </CardContent>
      </motion.div>
    </AnimatePresence>
  </Card>
)
}
